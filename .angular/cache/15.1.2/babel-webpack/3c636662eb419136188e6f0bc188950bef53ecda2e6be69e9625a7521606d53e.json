{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class GameService {\n  constructor() {\n    this.board = [];\n    this.boardSize = 9;\n    this.activePlayer = \"X\";\n    this.isGameRunning = false;\n    this.isGameOver = false;\n    this.winner = false;\n    this.newGame();\n  }\n  newGame() {\n    this.activePlayer = \"X\";\n    this.turnCount = 0;\n    this.isGameRunning = false;\n    this.isGameOver = false;\n    this.winner = false;\n    this.board = this.createBoard();\n  }\n  createBoard() {\n    let board = [];\n    for (let i = 0; i < 9; i++) {\n      board.push({\n        id: i,\n        state: null\n      });\n    }\n    ;\n    return board;\n  }\n  get getBoard() {\n    return this.board;\n  }\n  set setBoard(board) {\n    this.board = [...board];\n  }\n  changePlayerTurn(squareClicked) {\n    this.updateBoard(squareClicked);\n    if (!this.isGameOver) this.activePlayer = this.activePlayer === \"X\" ? \"O\" : \"X\";\n    this.turnCount++;\n    this.isGameOver = this.isGameOver ? true : false;\n  }\n  updateBoard(squareClicked) {\n    this.board[squareClicked.id].state = squareClicked.state;\n    if (this.isWinner) {\n      this.winner = true;\n      this.isGameRunning = false;\n      this.isGameOver = true;\n    }\n  }\n  get gameOver() {\n    return this.turnCount > 8 || this.winner ? true : false;\n  }\n  get isWinner() {\n    return this.checkDiag() || this.checkRows(this.board, \"row\") || this.checkRows(this.board, \"col\") ? true : false;\n  }\n  checkRows(board, mode) {\n    const ROW = mode === \"row\" ? true : false,\n      DIST = ROW ? 1 : 3,\n      INC = ROW ? 3 : 1,\n      NUMTIMES = ROW ? 7 : 3;\n    for (let i = 0; i < NUMTIMES; i += INC) {\n      let firstSquare = board[i].state,\n        secondSquare = board[i + DIST].state,\n        thirdSquare = board[i + DIST * 2].state;\n      if (firstSquare && secondSquare && thirdSquare) {\n        if (firstSquare === secondSquare && secondSquare === thirdSquare) return true;\n      }\n    }\n    return false;\n  }\n  checkDiag() {\n    const timesRun = 2,\n      midSquare = this.board[4].state;\n    for (let i = 0; i <= timesRun; i += 2) {\n      let upperCorner = this.board[i].state,\n        lowerCorner = this.board[8 - i].state;\n      if (midSquare && upperCorner && lowerCorner) {\n        if (midSquare === upperCorner && upperCorner === lowerCorner) return true;\n      }\n    }\n    return false;\n  }\n}\nGameService.ɵfac = function GameService_Factory(t) {\n  return new (t || GameService)();\n};\nGameService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GameService,\n  factory: GameService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["GameService","constructor","newGame","activePlayer","turnCount","isGameRunning","isGameOver","winner","board","createBoard","i","push","id","state","getBoard","setBoard","changePlayerTurn","squareClicked","updateBoard","isWinner","gameOver","checkDiag","checkRows","mode","ROW","DIST","INC","NUMTIMES","firstSquare","secondSquare","thirdSquare","timesRun","midSquare","upperCorner","lowerCorner","factory"],"sourceRoot":"","sources":["C:\\project\\typescript\\my-app\\src\\app\\game.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class GameService {\r\n  \r\n  public board = [];\r\n  boardSize: number = 9;\r\n  activePlayer: string = \"X\";\r\n  turnCount: 0;\r\n  isGameRunning: boolean = false;\r\n  isGameOver: boolean = false;\r\n  winner: boolean = false;\r\n\r\n  constructor() {\r\n     this.newGame()\r\n  }\r\n   \r\n  newGame(){\r\n    this.activePlayer = \"X\";\r\n    this.turnCount = 0;\r\n    this.isGameRunning = false;\r\n    this.isGameOver =  false;\r\n    this.winner = false;\r\n    this.board = this.createBoard();\r\n  } \r\n\r\n  createBoard(){\r\n    let board = [];\r\n    for( let i = 0; i < 9; i ++ ){\r\n      board.push( { id: i, state: null } )\r\n    };\r\n    return board\r\n  } \r\n\r\n   get getBoard (){\r\n     return this.board\r\n   }\r\n\r\n   set setBoard( board  ){\r\n     this.board = [...board]\r\n   }\r\n   \r\n  changePlayerTurn( squareClicked){  \r\n    this.updateBoard( squareClicked )\r\n    if(!this.isGameOver) this.activePlayer = this.activePlayer === \"X\" ? \"O\" : \"X\"\r\n    this.turnCount ++;\r\n    this.isGameOver = this.isGameOver ? true : false;\r\n   }\r\n\r\n  updateBoard( squareClicked ){\r\n    this.board[ squareClicked.id ].state = squareClicked.state\r\n    if (this.isWinner) {\r\n       this.winner = true;\r\n       this.isGameRunning = false;\r\n       this.isGameOver = true;\r\n    }\r\n  }\r\n\r\n  get gameOver(): boolean{\r\n    return this.turnCount > 8 || this.winner ? true : false\r\n  }\r\n\r\n  get isWinner(): boolean{\r\n    return this.checkDiag() || this.checkRows(this.board, \"row\") || this.checkRows(this.board, \"col\") ? true : false;\r\n  }\r\n\r\n   checkRows( board, mode ): boolean{\r\n    \r\n    const\r\n      ROW = mode === \"row\" ? true : false,\r\n      DIST = ROW ? 1 : 3,\r\n      INC = ROW ? 3 : 1,\r\n      NUMTIMES = ROW ? 7 : 3;\r\n\r\n      for ( let i = 0; i < NUMTIMES; i += INC ){\r\n\r\n        let \r\n          firstSquare = board[i].state,\r\n          secondSquare =  board[i + DIST].state,\r\n          thirdSquare = board[ i + ( DIST * 2)].state;\r\n\r\n        if ( firstSquare && secondSquare && thirdSquare  ){\r\n           if ( firstSquare === secondSquare && secondSquare === thirdSquare ) return true    \r\n        }\r\n      }\r\n      return false\r\n   }\r\n\r\n   checkDiag (){\r\n    const timesRun = 2,\r\n      midSquare = this.board[4].state;\r\n\r\n    for( let i = 0; i <= timesRun; i+=2 ){\r\n\r\n     let \r\n      upperCorner = this.board[i].state,\r\n      lowerCorner =  this.board[8 - i].state;\r\n    \r\n      if ( midSquare && upperCorner && lowerCorner  ){\r\n          if( midSquare === upperCorner && upperCorner === lowerCorner) return true\r\n      }\r\n    }\r\n\r\n     return false\r\n   }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}